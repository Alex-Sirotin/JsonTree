<?php

namespace ABCship\Tests\unit;

use ABCship\JsonTree\StoreProvider\File\Node;
use ABCship\JsonTree\Tree\TreeNodeInterface;

class JsonTreeNodeTest extends \ABCship\Tests\JsonTreeTestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createTree();
    }

    function testAddChild()
    {
        $node = $this->tree->search(10);
        $newNode = new Node(12, "Added node");
        $addedNode = $node->addChild($newNode);

        $foundAddedNode = $this->tree->search(12);
        $this->assertNotNull($addedNode);
        $this->assertInstanceOf(TreeNodeInterface::class, $addedNode);
        $this->assertEquals(10, $foundAddedNode->getParentId());
        $this->assertEqualsCanonicalizing($addedNode->toArray(), $foundAddedNode->toArray());

        $newNode2 = new Node(13, "Added node2");
        $addedNode2 = $foundAddedNode->addChild($newNode2);

        $foundAddedNode2 = $this->tree->search(13);
        $this->assertNotNull($addedNode2);
        $this->assertInstanceOf(TreeNodeInterface::class, $addedNode2);
        $this->assertEquals(12, $foundAddedNode2->getParentId());
        $this->assertEqualsCanonicalizing($addedNode2->toArray(), $foundAddedNode2->toArray());
    }

    function testGetChildren()
    {
        $node = $this->tree->search(1);

        $children = [];
        foreach($node->getChildren() as $child) {
            $children[] = $child->getId();
        }

        $this->assertEqualsCanonicalizing([2,3], $children);

        $node = $this->tree->search(4);

        $children = [];
        foreach($node->getChildren() as $child) {
            $children[] = $child->getId();
        }

        $this->assertEqualsCanonicalizing([6,7], $children);
    }
}
