<?php


use PHPUnit\Framework\TestCase;

class JsonTreeTest extends JsonTreeTestCase
{
    use \ABCShip\Util\Memory;

    private \ABCShip\JsonTree\Tree $tree;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

//        $this->tree = new \ABCShip\JsonTree\Tree();
//        $this->tree->buildTree($this->getData());
    }

    public function testMemory()
    {
        $before = $this->getMemory();
        $fileName = tempnam(sys_get_temp_dir(), 'memtest');
        $file = new SplFileObject($fileName, 'w');
//        $file->setFlags(SplFileObject::READ_CSV);
//        $file = new SplTempFileObject();
        $created = $this->getUsage($before);
        $batchSize = 1000;
        $batch = 0;
        $res = [];

        for ($i = 1; $i < 10_000_000; $i++) {
            $res[] = [rand(1, $i), rand(1, $i), rand(1, $i)];
            if ($batch >= $batchSize) {
                $file->fputcsv($res);
                $batch = 0;
                $res = [];
            }
            $batch++;
        }

        $written = $this->getUsage($before);
        echo json_encode([
                'before' => $before,
                'created' => $created,
                'written' => $written,
                'count' => intdiv($this->getMemoryLimit(), $written),
            ]) . PHP_EOL;
        ob_flush();
    }

//    public function testBuildTree()
//    {
//        $this->assertIsObject($this->tree);
//    }
//
//    public function testFlattenTree()
//    {
//        $this->tree->buildTree($this->getData(), 7);
//
//        $result = [
//            [1, "Node 1", null],
//            [8, "Node 8", 7],
//            [2, "Node 2", 1],
//            [9, "Node 9", 10],
//            [3, "Node 3", 1],
//            [10, "Node 10",5],
//            [4, "Node 4", 3],
//            [11, "Node 10"],
//            [5, "Node 5", 5],
//            [6, "Node 6", 4],
//            [7, "Node 7", 4],
//        ];
//
//        $this->assertIsIterable($this->tree->flattenTree());
//        foreach($this->tree->flattenTree() as $row) {
//            list('name' => $name, 'id' => $id, 'parent_id' => $parent) = $row;
//            list($id2, $name2, $parent2) = current($result);
//            $this->assertEquals($id2, $id);
//            $this->assertEquals($parent2, $parent);
//            $this->assertEquals($name, $name);
//            next($result);
//        }
//    }
//
//    public function testBuildErrors()
//    {
//        $errors = [
//            'gfdgsdfgdf',
//            'gfdgsdfgdf',
//            '{ "id1": 12, "name2": "Node 10" }',
//            '[ "id1": 13, "name2": "Node 10" }',
//        ];
//
//        foreach ($this->tree->getBuildErrors() as $error) {
//            $this->assertContains($error, $errors);
//        }
//    }
//
//    public function testSearch()
//    {
//        $found = $this->tree->search(5);
//        $this->assertNotNull($found);
//        $this->assertIsArray($found);
//        $this->assertContains(5, $found);
//
//        $found = $this->tree->search(1);
//        $this->assertNotNull($found);
//        $this->assertIsArray($found);
//        $this->assertContains(1, $found);
//
//        $this->assertNull($this->tree->search(12));
//    }
//
//    public function getData(): array
//    {
//        return [
//            'gfdgsdfgdf',
//            '{ "id": 1, "name": "Node 1", "parent_id": null }',
//            'gfdgsdfgdf',
//            '{ "id": 2, "name": "Node 2", "parent_id": 1 }',
//            '{ "id": 3, "name": "Node 3", "parent_id": 1 }',
//            '{ "id": 4, "name": "Node 4", "parent_id": 3 }',
//            '{ "id": 5, "name": "Node 5", "parent_id": 5 }',
//            '{ "id": 6, "name": "Node 6", "parent_id": 4 }',
//            '{ "id": 7, "name": "Node 7", "parent_id": 4 }',
//            '{ "id": 8, "name": "Node 8", "parent_id": 7 }',
//            '{ "id": 9, "name": "Node 9", "parent_id": 10 }',
//            '{ "id": 10, "name": "Node 10", "parent_id": 5 }',
//            '{ "id": 11, "name": "Node 10" }',
//            '{ "id1": 12, "name2": "Node 10" }',
//            '[ "id1": 13, "name2": "Node 10" }',
//        ];
//    }
}

